digraph "ICFG" {
	label="ICFG";

	Node0x564362c83010 [shape=record,color=green,label="{FunExitICFGNode21 \{fun: main\}\nPhiStmt: [Var31 \<-- ([Var26, ICFGNode20],)]  \n   ret i32 0 }"];
	Node0x564362c7d990 [shape=record,color=black,label="{IntraICFGNode20 \{fun: main\}\n   ret i32 0 }"];
	Node0x564362c7d990 -> Node0x564362c83010[style=solid];
	Node0x564362c5ce40 [shape=record,color=blue,label="{RetICFGNode19 \{fun: main\}\nRetPE: [Var32 \<-- Var6]  \n   %call = call i32 @test(i32 1, i32 2) }"];
	Node0x564362c5ce40 -> Node0x564362c7d990[style=solid];
	Node0x564362c49350 [shape=record,color=red,label="{CallICFGNode18 \{fun: main\}\nCallPE: [Var7 \<-- Var12]  \n   %call = call i32 @test(i32 1, i32 2) \nCallPE: [Var8 \<-- Var22]  \n   %call = call i32 @test(i32 1, i32 2) |{<s0>0x564362c5c270}}"];
	Node0x564362c49350:s0 -> Node0x564362c7bbb0[style=solid,color=red];
	Node0x564362c5c9a0 [shape=record,color=yellow,label="{FunEntryICFGNode17 \{fun: main\}}"];
	Node0x564362c5c9a0 -> Node0x564362c49350[style=solid];
	Node0x564362c4c090 [shape=record,color=green,label="{FunExitICFGNode16 \{fun: test\}\nPhiStmt: [Var6 \<-- ([Var26, ICFGNode15],)]  \n   ret i32 0 |{<s0>0x564362c5c270}}"];
	Node0x564362c4c090:s0 -> Node0x564362c5ce40[style=solid,color=blue];
	Node0x564362c7d320 [shape=record,color=black,label="{IntraICFGNode15 \{fun: test\}\n   ret i32 0 }"];
	Node0x564362c7d320 -> Node0x564362c4c090[style=solid];
	Node0x564362c52db0 [shape=record,color=black,label="{IntraICFGNode14 \{fun: test\}\nBranchStmt: [ Unconditional branch]\nSuccessor 0 ICFGNode15   \n   br label %if.end }"];
	Node0x564362c52db0 -> Node0x564362c7d320[style=solid];
	Node0x564362c52bd0 [shape=record,color=black,label="{IntraICFGNode13 \{fun: test\}\nBranchStmt: [ Unconditional branch]\nSuccessor 0 ICFGNode15   \n   br label %if.end }"];
	Node0x564362c52bd0 -> Node0x564362c7d320[style=solid];
	Node0x564362c5e560 [shape=record,color=purple,label="{GlobalICFGNode0\nCopyStmt: [Var1 \<-- Var0]  \n i8* null \{ constant data \}\nAddrStmt: [Var26 \<-- Var3]  \n i32 0 \{ constant data \}\nAddrStmt: [Var12 \<-- Var3]  \n i32 1 \{ constant data \}\nAddrStmt: [Var22 \<-- Var3]  \n i32 2 \{ constant data \}\nAddrStmt: [Var4 \<-- Var5]  \n test \nAddrStmt: [Var16 \<-- Var17]  \n svf_assert \nAddrStmt: [Var29 \<-- Var30]  \n main }"];
	Node0x564362c5e560 -> Node0x564362c5c9a0[style=solid];
	Node0x564362c7bbb0 [shape=record,color=yellow,label="{FunEntryICFGNode1 \{fun: test\}}"];
	Node0x564362c7bbb0 -> Node0x564362c5e170[style=solid];
	Node0x564362c5e170 [shape=record,color=black,label="{IntraICFGNode2 \{fun: test\}\nCmpStmt: [Var9 \<-- (Var7 predicate38 Var8)]  \n   %cmp = icmp sgt i32 %a, %b }"];
	Node0x564362c5e170 -> Node0x564362c48050[style=solid];
	Node0x564362c48050 [shape=record,color=black,label="{IntraICFGNode3 \{fun: test\}\nBranchStmt: [Condition Var9]\nSuccessor 0 ICFGNode4   Successor 1 ICFGNode5   \n   br i1 %cmp, label %if.then, label %if.else }"];
	Node0x564362c48050 -> Node0x564362c5cc60[style=solid];
	Node0x564362c48050 -> Node0x564362c82810[style=solid];
	Node0x564362c5cc60 [shape=record,color=black,label="{IntraICFGNode4 \{fun: test\}\nBinaryOPStmt: [Var11 \<-- (Var12 opcode13 Var12)]  \n   %inc = add nsw i32 1, 1 }"];
	Node0x564362c5cc60 -> Node0x564362c52320[style=solid];
	Node0x564362c82810 [shape=record,color=black,label="{IntraICFGNode5 \{fun: test\}\nBinaryOPStmt: [Var20 \<-- (Var12 opcode13 Var12)]  \n   %inc3 = add nsw i32 1, 1 }"];
	Node0x564362c82810 -> Node0x564362c52440[style=solid];
	Node0x564362c52320 [shape=record,color=black,label="{IntraICFGNode6 \{fun: test\}\nBinaryOPStmt: [Var13 \<-- (Var12 opcode13 Var12)]  \n   %inc1 = add nsw i32 1, 1 }"];
	Node0x564362c52320 -> Node0x564362c52560[style=solid];
	Node0x564362c52440 [shape=record,color=black,label="{IntraICFGNode7 \{fun: test\}\nCmpStmt: [Var21 \<-- (Var20 predicate32 Var22)]  \n   %cmp4 = icmp eq i32 %inc3, 2 }"];
	Node0x564362c52440 -> Node0x564362c4ef20[style=solid];
	Node0x564362c52560 [shape=record,color=black,label="{IntraICFGNode8 \{fun: test\}\nCmpStmt: [Var14 \<-- (Var11 predicate32 Var13)]  \n   %cmp2 = icmp eq i32 %inc, %inc1 }"];
	Node0x564362c52560 -> Node0x564362c80310[style=solid];
	Node0x564362c4ef20 [shape=record,color=red,label="{CallICFGNode9 \{fun: test\}}"];
	Node0x564362c4ef20 -> Node0x564362c5e680[style=solid];
	Node0x564362c5e680 [shape=record,color=blue,label="{RetICFGNode10 \{fun: test\}}"];
	Node0x564362c5e680 -> Node0x564362c52bd0[style=solid];
	Node0x564362c80310 [shape=record,color=red,label="{CallICFGNode11 \{fun: test\}}"];
	Node0x564362c80310 -> Node0x564362c4c5c0[style=solid];
	Node0x564362c4c5c0 [shape=record,color=blue,label="{RetICFGNode12 \{fun: test\}}"];
	Node0x564362c4c5c0 -> Node0x564362c52db0[style=solid];
}
